name: Release artifacts

on:
  release:
    types: [published]

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY_LNAS }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install poetry
          pip install -U poetry
          poetry cache clear --all pypi
          poetry install --with docs

      - name: Build the project with Poetry
        run: poetry build

      - name: List files in dist directory
        run: ls -al ./dist

      - name: Extract version
        run: |
          VERSION=${GITHUB_REF##*/v}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Extracted version: ${GITHUB_REF##*/v}"

      - name: Upload Release Asset Zip
        id: upload-release-asset-zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/cfdmod-${{ env.VERSION }}.tar.gz
          asset_name: ./dist/cfdmod-release-${{ env.VERSION }}.tar.gz
          asset_content_type: application/zip
  
      - name: Upload Release Asset Wheel
        id: upload-release-asset-wheel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/cfdmod-${{ env.VERSION }}-py3-none-any.whl
          asset_name: ./dist/cfdmod-release-${{ env.VERSION }}-py3-none-any.whl
          asset_content_type: application/zip
  

      - name: Sphinx build
        run: |
          sudo apt-get install -y pandoc
          cd docs
          poetry run make html  # Build HTML docs
          cd ..
          zip -r docs-version-${{ env.VERSION }}.zip docs/build/html

      - name: Upload Release Asset Documentation
        id: upload-release-asset-docs
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: docs-version-${{ env.VERSION }}.zip
          asset_name: docs-version-${{ env.VERSION }}.zip
          asset_content_type: application/zip

      